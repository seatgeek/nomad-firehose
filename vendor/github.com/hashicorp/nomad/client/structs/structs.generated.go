// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package structs

import (
	"errors"
	"fmt"
	pkg3_config "github.com/hashicorp/nomad/client/config"
	pkg1_stats "github.com/hashicorp/nomad/client/stats"
	pkg2_structs "github.com/hashicorp/nomad/nomad/structs"
	pkg5_config "github.com/hashicorp/nomad/nomad/structs/config"
	pkg4_version "github.com/hashicorp/nomad/version"
	codec1978 "github.com/ugorji/go/codec"
	io "io"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF8102 = 1
	codecSelferC_RAW102  = 0
	// ----- value types used ----
	codecSelferValueTypeArray102 = 10
	codecSelferValueTypeMap102   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey102    = 2
	codecSelfer_containerMapValue102  = 3
	codecSelfer_containerMapEnd102    = 4
	codecSelfer_containerArrayElem102 = 6
	codecSelfer_containerArrayEnd102  = 7
)

var (
	codecSelferBitsize102                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr102 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer102 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_config.Config
		var v1 pkg1_stats.HostStats
		var v2 pkg2_structs.QueryMeta
		var v3 pkg5_config.ConsulConfig
		var v4 pkg4_version.VersionInfo
		var v5 io.Writer
		var v6 time.Duration
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *RpcError) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Message"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Message))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Code == nil {
					r.EncodeNil()
				} else {
					yy7 := *x.Code
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeInt(int64(yy7))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Code"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Code == nil {
					r.EncodeNil()
				} else {
					yy9 := *x.Code
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeInt(int64(yy9))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *RpcError) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *RpcError) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				yyv4 := &x.Message
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Code":
			if r.TryDecodeAsNil() {
				if x.Code != nil {
					x.Code = nil
				}
			} else {
				if x.Code == nil {
					x.Code = new(int64)
				}
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int64)(x.Code)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *RpcError) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		yyv9 := &x.Message
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.Code != nil {
			x.Code = nil
		}
	} else {
		if x.Code == nil {
			x.Code = new(int64)
		}
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int64)(x.Code)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *ClientStatsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.HostStats == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else if z.HasExtensions() && z.EncExt(x.HostStats) {
					} else {
						z.EncFallback(x.HostStats)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("HostStats"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.HostStats == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else if z.HasExtensions() && z.EncExt(x.HostStats) {
					} else {
						z.EncFallback(x.HostStats)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *ClientStatsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *ClientStatsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "HostStats":
			if r.TryDecodeAsNil() {
				if x.HostStats != nil {
					x.HostStats = nil
				}
			} else {
				if x.HostStats == nil {
					x.HostStats = new(pkg1_stats.HostStats)
				}
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(x.HostStats) {
				} else {
					z.DecFallback(x.HostStats, false)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *ClientStatsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.HostStats != nil {
			x.HostStats = nil
		}
	} else {
		if x.HostStats == nil {
			x.HostStats = new(pkg1_stats.HostStats)
		}
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else if z.HasExtensions() && z.DecExt(x.HostStats) {
		} else {
			z.DecFallback(x.HostStats, false)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *AllocFileInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.IsDir))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("IsDir"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.IsDir))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Size))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Size"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Size))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.FileMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("FileMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.FileMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yy16 := &x.ModTime
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
					r.EncodeBuiltin(yym18, yy16)
				} else if z.HasExtensions() && z.EncExt(yy16) {
				} else if yym17 {
					z.EncBinaryMarshal(yy16)
				} else if !yym17 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy16)
				} else {
					z.EncFallback(yy16)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("ModTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yy19 := &x.ModTime
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if yym21 := z.TimeRtidIfBinc(); yym21 != 0 {
					r.EncodeBuiltin(yym21, yy19)
				} else if z.HasExtensions() && z.EncExt(yy19) {
				} else if yym20 {
					z.EncBinaryMarshal(yy19)
				} else if !yym20 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy19)
				} else {
					z.EncFallback(yy19)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *AllocFileInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *AllocFileInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "IsDir":
			if r.TryDecodeAsNil() {
				x.IsDir = false
			} else {
				yyv6 := &x.IsDir
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				yyv8 := &x.Size
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "FileMode":
			if r.TryDecodeAsNil() {
				x.FileMode = ""
			} else {
				yyv10 := &x.FileMode
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "ModTime":
			if r.TryDecodeAsNil() {
				x.ModTime = time.Time{}
			} else {
				yyv12 := &x.ModTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if yym14 := z.TimeRtidIfBinc(); yym14 != 0 {
					r.DecodeBuiltin(yym14, yyv12)
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else if yym13 {
					z.DecBinaryUnmarshal(yyv12)
				} else if !yym13 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv12)
				} else {
					z.DecFallback(yyv12, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *AllocFileInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj15 int
	var yyb15 bool
	var yyhl15 bool = l >= 0
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv16 := &x.Name
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			*((*string)(yyv16)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.IsDir = false
	} else {
		yyv18 := &x.IsDir
		yym19 := z.DecBinary()
		_ = yym19
		if false {
		} else {
			*((*bool)(yyv18)) = r.DecodeBool()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		yyv20 := &x.Size
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			*((*int64)(yyv20)) = int64(r.DecodeInt(64))
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.FileMode = ""
	} else {
		yyv22 := &x.FileMode
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*string)(yyv22)) = r.DecodeString()
		}
	}
	yyj15++
	if yyhl15 {
		yyb15 = yyj15 > l
	} else {
		yyb15 = r.CheckBreak()
	}
	if yyb15 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.ModTime = time.Time{}
	} else {
		yyv24 := &x.ModTime
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else if yym26 := z.TimeRtidIfBinc(); yym26 != 0 {
			r.DecodeBuiltin(yym26, yyv24)
		} else if z.HasExtensions() && z.DecExt(yyv24) {
		} else if yym25 {
			z.DecBinaryUnmarshal(yyv24)
		} else if !yym25 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv24)
		} else {
			z.DecFallback(yyv24, false)
		}
	}
	for {
		yyj15++
		if yyhl15 {
			yyb15 = yyj15 > l
		} else {
			yyb15 = r.CheckBreak()
		}
		if yyb15 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj15-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FsListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FsListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FsListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv6 := &x.Path
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv12 := &x.MinQueryIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv14 := &x.MaxQueryTime
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv16 := &x.AllowStale
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv18 := &x.Prefix
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv20 := &x.AuthToken
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv22 := &x.Forwarded
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FsListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv25 := &x.AllocID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv27 := &x.Path
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv41 := &x.AuthToken
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv43 := &x.Forwarded
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FsListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Files == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocFileInfo(([]*AllocFileInfo)(x.Files), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Files"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Files == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocFileInfo(([]*AllocFileInfo)(x.Files), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FsListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FsListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Files":
			if r.TryDecodeAsNil() {
				x.Files = nil
			} else {
				yyv4 := &x.Files
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocFileInfo((*[]*AllocFileInfo)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FsListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Files = nil
	} else {
		yyv13 := &x.Files
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocFileInfo((*[]*AllocFileInfo)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FsStatRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FsStatRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FsStatRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv6 := &x.Path
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv12 := &x.MinQueryIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv14 := &x.MaxQueryTime
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv16 := &x.AllowStale
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv18 := &x.Prefix
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv20 := &x.AuthToken
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv22 := &x.Forwarded
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FsStatRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv25 := &x.AllocID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv27 := &x.Path
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv41 := &x.AuthToken
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv43 := &x.Forwarded
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FsStatResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Info == nil {
					r.EncodeNil()
				} else {
					x.Info.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Info"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Info == nil {
					r.EncodeNil()
				} else {
					x.Info.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FsStatResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FsStatResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Info":
			if r.TryDecodeAsNil() {
				if x.Info != nil {
					x.Info = nil
				}
			} else {
				if x.Info == nil {
					x.Info = new(AllocFileInfo)
				}
				x.Info.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FsStatResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.Info != nil {
			x.Info = nil
		}
	} else {
		if x.Info == nil {
			x.Info = new(AllocFileInfo)
		}
		x.Info.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FsStreamRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 15
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Offset))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Offset"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Offset))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Origin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Origin"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Origin))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.PlainText))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("PlainText"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.PlainText))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Limit))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Limit"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Limit))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FsStreamRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FsStreamRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv6 := &x.Path
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Offset":
			if r.TryDecodeAsNil() {
				x.Offset = 0
			} else {
				yyv8 := &x.Offset
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "Origin":
			if r.TryDecodeAsNil() {
				x.Origin = ""
			} else {
				yyv10 := &x.Origin
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "PlainText":
			if r.TryDecodeAsNil() {
				x.PlainText = false
			} else {
				yyv12 := &x.PlainText
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Limit":
			if r.TryDecodeAsNil() {
				x.Limit = 0
			} else {
				yyv14 := &x.Limit
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				yyv16 := &x.Follow
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv18 := &x.Region
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv20 := &x.Namespace
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv22 := &x.MinQueryIndex
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*uint64)(yyv22)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv24 := &x.MaxQueryTime
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv24) {
				} else {
					*((*int64)(yyv24)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv26 := &x.AllowStale
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*bool)(yyv26)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv28 := &x.Prefix
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv30 := &x.AuthToken
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*string)(yyv30)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv32 := &x.Forwarded
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*bool)(yyv32)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FsStreamRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj34 int
	var yyb34 bool
	var yyhl34 bool = l >= 0
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv35 := &x.AllocID
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv37 := &x.Path
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Offset = 0
	} else {
		yyv39 := &x.Offset
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*int64)(yyv39)) = int64(r.DecodeInt(64))
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Origin = ""
	} else {
		yyv41 := &x.Origin
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.PlainText = false
	} else {
		yyv43 := &x.PlainText
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Limit = 0
	} else {
		yyv45 := &x.Limit
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*int64)(yyv45)) = int64(r.DecodeInt(64))
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		yyv47 := &x.Follow
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*bool)(yyv47)) = r.DecodeBool()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv49 := &x.Region
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv51 := &x.Namespace
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*string)(yyv51)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv53 := &x.MinQueryIndex
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*uint64)(yyv53)) = uint64(r.DecodeUint(64))
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv55 := &x.MaxQueryTime
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv55) {
		} else {
			*((*int64)(yyv55)) = int64(r.DecodeInt(64))
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv57 := &x.AllowStale
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*((*bool)(yyv57)) = r.DecodeBool()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv59 := &x.Prefix
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*string)(yyv59)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv61 := &x.AuthToken
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*string)(yyv61)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv63 := &x.Forwarded
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*bool)(yyv63)) = r.DecodeBool()
		}
	}
	for {
		yyj34++
		if yyhl34 {
			yyb34 = yyj34 > l
		} else {
			yyb34 = r.CheckBreak()
		}
		if yyb34 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj34-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FsLogsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [15]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(15)
			} else {
				yynn2 = 15
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Task))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Task"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Task))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.LogType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("LogType"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.LogType))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.Offset))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Offset"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.Offset))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Origin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Origin"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Origin))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.PlainText))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("PlainText"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.PlainText))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FsLogsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FsLogsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Task":
			if r.TryDecodeAsNil() {
				x.Task = ""
			} else {
				yyv6 := &x.Task
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "LogType":
			if r.TryDecodeAsNil() {
				x.LogType = ""
			} else {
				yyv8 := &x.LogType
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Offset":
			if r.TryDecodeAsNil() {
				x.Offset = 0
			} else {
				yyv10 := &x.Offset
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "Origin":
			if r.TryDecodeAsNil() {
				x.Origin = ""
			} else {
				yyv12 := &x.Origin
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "PlainText":
			if r.TryDecodeAsNil() {
				x.PlainText = false
			} else {
				yyv14 := &x.PlainText
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				yyv16 := &x.Follow
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv18 := &x.Region
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv20 := &x.Namespace
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv22 := &x.MinQueryIndex
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*uint64)(yyv22)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv24 := &x.MaxQueryTime
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv24) {
				} else {
					*((*int64)(yyv24)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv26 := &x.AllowStale
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*bool)(yyv26)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv28 := &x.Prefix
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv30 := &x.AuthToken
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*string)(yyv30)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv32 := &x.Forwarded
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*bool)(yyv32)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FsLogsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj34 int
	var yyb34 bool
	var yyhl34 bool = l >= 0
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv35 := &x.AllocID
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Task = ""
	} else {
		yyv37 := &x.Task
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.LogType = ""
	} else {
		yyv39 := &x.LogType
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Offset = 0
	} else {
		yyv41 := &x.Offset
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*int64)(yyv41)) = int64(r.DecodeInt(64))
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Origin = ""
	} else {
		yyv43 := &x.Origin
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.PlainText = false
	} else {
		yyv45 := &x.PlainText
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*bool)(yyv45)) = r.DecodeBool()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		yyv47 := &x.Follow
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*bool)(yyv47)) = r.DecodeBool()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv49 := &x.Region
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv51 := &x.Namespace
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*string)(yyv51)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv53 := &x.MinQueryIndex
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*uint64)(yyv53)) = uint64(r.DecodeUint(64))
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv55 := &x.MaxQueryTime
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv55) {
		} else {
			*((*int64)(yyv55)) = int64(r.DecodeInt(64))
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv57 := &x.AllowStale
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*((*bool)(yyv57)) = r.DecodeBool()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv59 := &x.Prefix
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*string)(yyv59)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv61 := &x.AuthToken
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*string)(yyv61)) = r.DecodeString()
		}
	}
	yyj34++
	if yyhl34 {
		yyb34 = yyj34 > l
	} else {
		yyb34 = r.CheckBreak()
	}
	if yyb34 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv63 := &x.Forwarded
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*bool)(yyv63)) = r.DecodeBool()
		}
	}
	for {
		yyj34++
		if yyhl34 {
			yyb34 = yyj34 > l
		} else {
			yyb34 = r.CheckBreak()
		}
		if yyb34 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj34-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *StreamErrWrapper) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Error == nil {
					r.EncodeNil()
				} else {
					x.Error.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Error"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Error == nil {
					r.EncodeNil()
				} else {
					x.Error.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW102, []byte(x.Payload))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Payload"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW102, []byte(x.Payload))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *StreamErrWrapper) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *StreamErrWrapper) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Error":
			if r.TryDecodeAsNil() {
				if x.Error != nil {
					x.Error = nil
				}
			} else {
				if x.Error == nil {
					x.Error = new(RpcError)
				}
				x.Error.CodecDecodeSelf(d)
			}
		case "Payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv5 := &x.Payload
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*yyv5 = r.DecodeBytes(*(*[]byte)(yyv5), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *StreamErrWrapper) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.Error != nil {
			x.Error = nil
		}
	} else {
		if x.Error == nil {
			x.Error = new(RpcError)
		}
		x.Error.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv9 := &x.Payload
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*yyv9 = r.DecodeBytes(*(*[]byte)(yyv9), false, false)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *AllocStatsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Task))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Task"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Task))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Namespace"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Namespace))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AuthToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.AuthToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Forwarded"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.Forwarded))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *AllocStatsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *AllocStatsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Task":
			if r.TryDecodeAsNil() {
				x.Task = ""
			} else {
				yyv6 := &x.Task
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				yyv10 := &x.Namespace
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv12 := &x.MinQueryIndex
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv14 := &x.MaxQueryTime
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv16 := &x.AllowStale
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv18 := &x.Prefix
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "AuthToken":
			if r.TryDecodeAsNil() {
				x.AuthToken = ""
			} else {
				yyv20 := &x.AuthToken
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "Forwarded":
			if r.TryDecodeAsNil() {
				x.Forwarded = false
			} else {
				yyv22 := &x.Forwarded
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *AllocStatsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv25 := &x.AllocID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Task = ""
	} else {
		yyv27 := &x.Task
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv29 := &x.Region
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		yyv31 := &x.Namespace
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AuthToken = ""
	} else {
		yyv41 := &x.AuthToken
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Forwarded = false
	} else {
		yyv43 := &x.Forwarded
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *AllocStatsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Stats == nil {
					r.EncodeNil()
				} else {
					x.Stats.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Stats"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Stats == nil {
					r.EncodeNil()
				} else {
					x.Stats.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *AllocStatsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *AllocStatsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Stats":
			if r.TryDecodeAsNil() {
				if x.Stats != nil {
					x.Stats = nil
				}
			} else {
				if x.Stats == nil {
					x.Stats = new(AllocResourceUsage)
				}
				x.Stats.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *AllocStatsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.Stats != nil {
			x.Stats = nil
		}
	} else {
		if x.Stats == nil {
			x.Stats = new(AllocResourceUsage)
		}
		x.Stats.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *MemoryStats) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.RSS))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("RSS"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.RSS))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Cache))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Cache"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Cache))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Swap))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Swap"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Swap))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MaxUsage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MaxUsage"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MaxUsage))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.KernelUsage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("KernelUsage"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.KernelUsage))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.KernelMaxUsage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("KernelMaxUsage"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.KernelMaxUsage))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Measured == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						z.F.EncSliceStringV(x.Measured, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Measured"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Measured == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncSliceStringV(x.Measured, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *MemoryStats) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *MemoryStats) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "RSS":
			if r.TryDecodeAsNil() {
				x.RSS = 0
			} else {
				yyv4 := &x.RSS
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "Cache":
			if r.TryDecodeAsNil() {
				x.Cache = 0
			} else {
				yyv6 := &x.Cache
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Swap":
			if r.TryDecodeAsNil() {
				x.Swap = 0
			} else {
				yyv8 := &x.Swap
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxUsage":
			if r.TryDecodeAsNil() {
				x.MaxUsage = 0
			} else {
				yyv10 := &x.MaxUsage
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "KernelUsage":
			if r.TryDecodeAsNil() {
				x.KernelUsage = 0
			} else {
				yyv12 := &x.KernelUsage
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "KernelMaxUsage":
			if r.TryDecodeAsNil() {
				x.KernelMaxUsage = 0
			} else {
				yyv14 := &x.KernelMaxUsage
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		case "Measured":
			if r.TryDecodeAsNil() {
				x.Measured = nil
			} else {
				yyv16 := &x.Measured
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecSliceStringX(yyv16, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *MemoryStats) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.RSS = 0
	} else {
		yyv19 := &x.RSS
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Cache = 0
	} else {
		yyv21 := &x.Cache
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Swap = 0
	} else {
		yyv23 := &x.Swap
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.MaxUsage = 0
	} else {
		yyv25 := &x.MaxUsage
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.KernelUsage = 0
	} else {
		yyv27 := &x.KernelUsage
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.KernelMaxUsage = 0
	} else {
		yyv29 := &x.KernelMaxUsage
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Measured = nil
	} else {
		yyv31 := &x.Measured
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			z.F.DecSliceStringX(yyv31, false, d)
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *CpuStats) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeFloat64(float64(x.SystemMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("SystemMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeFloat64(float64(x.SystemMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeFloat64(float64(x.UserMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("UserMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeFloat64(float64(x.UserMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeFloat64(float64(x.TotalTicks))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("TotalTicks"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeFloat64(float64(x.TotalTicks))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.ThrottledPeriods))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("ThrottledPeriods"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.ThrottledPeriods))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.ThrottledTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("ThrottledTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.ThrottledTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeFloat64(float64(x.Percent))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Percent"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeFloat64(float64(x.Percent))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Measured == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						z.F.EncSliceStringV(x.Measured, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Measured"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Measured == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncSliceStringV(x.Measured, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *CpuStats) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *CpuStats) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "SystemMode":
			if r.TryDecodeAsNil() {
				x.SystemMode = 0
			} else {
				yyv4 := &x.SystemMode
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*float64)(yyv4)) = float64(r.DecodeFloat(false))
				}
			}
		case "UserMode":
			if r.TryDecodeAsNil() {
				x.UserMode = 0
			} else {
				yyv6 := &x.UserMode
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*float64)(yyv6)) = float64(r.DecodeFloat(false))
				}
			}
		case "TotalTicks":
			if r.TryDecodeAsNil() {
				x.TotalTicks = 0
			} else {
				yyv8 := &x.TotalTicks
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*float64)(yyv8)) = float64(r.DecodeFloat(false))
				}
			}
		case "ThrottledPeriods":
			if r.TryDecodeAsNil() {
				x.ThrottledPeriods = 0
			} else {
				yyv10 := &x.ThrottledPeriods
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "ThrottledTime":
			if r.TryDecodeAsNil() {
				x.ThrottledTime = 0
			} else {
				yyv12 := &x.ThrottledTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "Percent":
			if r.TryDecodeAsNil() {
				x.Percent = 0
			} else {
				yyv14 := &x.Percent
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*float64)(yyv14)) = float64(r.DecodeFloat(false))
				}
			}
		case "Measured":
			if r.TryDecodeAsNil() {
				x.Measured = nil
			} else {
				yyv16 := &x.Measured
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecSliceStringX(yyv16, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *CpuStats) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.SystemMode = 0
	} else {
		yyv19 := &x.SystemMode
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*float64)(yyv19)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.UserMode = 0
	} else {
		yyv21 := &x.UserMode
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*float64)(yyv21)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.TotalTicks = 0
	} else {
		yyv23 := &x.TotalTicks
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*float64)(yyv23)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.ThrottledPeriods = 0
	} else {
		yyv25 := &x.ThrottledPeriods
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.ThrottledTime = 0
	} else {
		yyv27 := &x.ThrottledTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Percent = 0
	} else {
		yyv29 := &x.Percent
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*float64)(yyv29)) = float64(r.DecodeFloat(false))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Measured = nil
	} else {
		yyv31 := &x.Measured
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			z.F.DecSliceStringX(yyv31, false, d)
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *ResourceUsage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.MemoryStats == nil {
					r.EncodeNil()
				} else {
					x.MemoryStats.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("MemoryStats"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.MemoryStats == nil {
					r.EncodeNil()
				} else {
					x.MemoryStats.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.CpuStats == nil {
					r.EncodeNil()
				} else {
					x.CpuStats.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("CpuStats"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.CpuStats == nil {
					r.EncodeNil()
				} else {
					x.CpuStats.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *ResourceUsage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *ResourceUsage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "MemoryStats":
			if r.TryDecodeAsNil() {
				if x.MemoryStats != nil {
					x.MemoryStats = nil
				}
			} else {
				if x.MemoryStats == nil {
					x.MemoryStats = new(MemoryStats)
				}
				x.MemoryStats.CodecDecodeSelf(d)
			}
		case "CpuStats":
			if r.TryDecodeAsNil() {
				if x.CpuStats != nil {
					x.CpuStats = nil
				}
			} else {
				if x.CpuStats == nil {
					x.CpuStats = new(CpuStats)
				}
				x.CpuStats.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *ResourceUsage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.MemoryStats != nil {
			x.MemoryStats = nil
		}
	} else {
		if x.MemoryStats == nil {
			x.MemoryStats = new(MemoryStats)
		}
		x.MemoryStats.CodecDecodeSelf(d)
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.CpuStats != nil {
			x.CpuStats = nil
		}
	} else {
		if x.CpuStats == nil {
			x.CpuStats = new(CpuStats)
		}
		x.CpuStats.CodecDecodeSelf(d)
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *TaskResourceUsage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.ResourceUsage == nil {
					r.EncodeNil()
				} else {
					x.ResourceUsage.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("ResourceUsage"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.ResourceUsage == nil {
					r.EncodeNil()
				} else {
					x.ResourceUsage.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Timestamp))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Timestamp"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Timestamp))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Pids == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encMapstringPtrtoResourceUsage((map[string]*ResourceUsage)(x.Pids), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Pids"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Pids == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encMapstringPtrtoResourceUsage((map[string]*ResourceUsage)(x.Pids), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *TaskResourceUsage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *TaskResourceUsage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "ResourceUsage":
			if r.TryDecodeAsNil() {
				if x.ResourceUsage != nil {
					x.ResourceUsage = nil
				}
			} else {
				if x.ResourceUsage == nil {
					x.ResourceUsage = new(ResourceUsage)
				}
				x.ResourceUsage.CodecDecodeSelf(d)
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = 0
			} else {
				yyv5 := &x.Timestamp
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*int64)(yyv5)) = int64(r.DecodeInt(64))
				}
			}
		case "Pids":
			if r.TryDecodeAsNil() {
				x.Pids = nil
			} else {
				yyv7 := &x.Pids
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					h.decMapstringPtrtoResourceUsage((*map[string]*ResourceUsage)(yyv7), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *TaskResourceUsage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.ResourceUsage != nil {
			x.ResourceUsage = nil
		}
	} else {
		if x.ResourceUsage == nil {
			x.ResourceUsage = new(ResourceUsage)
		}
		x.ResourceUsage.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Timestamp = 0
	} else {
		yyv11 := &x.Timestamp
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int64)(yyv11)) = int64(r.DecodeInt(64))
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Pids = nil
	} else {
		yyv13 := &x.Pids
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decMapstringPtrtoResourceUsage((*map[string]*ResourceUsage)(yyv13), d)
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *AllocResourceUsage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.ResourceUsage == nil {
					r.EncodeNil()
				} else {
					x.ResourceUsage.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("ResourceUsage"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.ResourceUsage == nil {
					r.EncodeNil()
				} else {
					x.ResourceUsage.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapstringPtrtoTaskResourceUsage((map[string]*TaskResourceUsage)(x.Tasks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapstringPtrtoTaskResourceUsage((map[string]*TaskResourceUsage)(x.Tasks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Timestamp))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Timestamp"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Timestamp))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *AllocResourceUsage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *AllocResourceUsage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "ResourceUsage":
			if r.TryDecodeAsNil() {
				if x.ResourceUsage != nil {
					x.ResourceUsage = nil
				}
			} else {
				if x.ResourceUsage == nil {
					x.ResourceUsage = new(ResourceUsage)
				}
				x.ResourceUsage.CodecDecodeSelf(d)
			}
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv5 := &x.Tasks
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					h.decMapstringPtrtoTaskResourceUsage((*map[string]*TaskResourceUsage)(yyv5), d)
				}
			}
		case "Timestamp":
			if r.TryDecodeAsNil() {
				x.Timestamp = 0
			} else {
				yyv7 := &x.Timestamp
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *AllocResourceUsage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.ResourceUsage != nil {
			x.ResourceUsage = nil
		}
	} else {
		if x.ResourceUsage == nil {
			x.ResourceUsage = new(ResourceUsage)
		}
		x.ResourceUsage.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv11 := &x.Tasks
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			h.decMapstringPtrtoTaskResourceUsage((*map[string]*TaskResourceUsage)(yyv11), d)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Timestamp = 0
	} else {
		yyv13 := &x.Timestamp
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int64)(yyv13)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x FSIsolation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1 := z.EncBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeInt(int64(x))
	}
}

func (x *FSIsolation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*int)(x)) = int(r.DecodeInt(codecSelferBitsize102))
	}
}

func (x *DriverNetwork) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.PortMap == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringIntV(x.PortMap, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("PortMap"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.PortMap == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringIntV(x.PortMap, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8102, string(x.IP))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.AutoAdvertise))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("AutoAdvertise"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.AutoAdvertise))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *DriverNetwork) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *DriverNetwork) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "PortMap":
			if r.TryDecodeAsNil() {
				x.PortMap = nil
			} else {
				yyv4 := &x.PortMap
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringIntX(yyv4, false, d)
				}
			}
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				yyv6 := &x.IP
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "AutoAdvertise":
			if r.TryDecodeAsNil() {
				x.AutoAdvertise = false
			} else {
				yyv8 := &x.AutoAdvertise
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *DriverNetwork) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.PortMap = nil
	} else {
		yyv11 := &x.PortMap
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			z.F.DecMapStringIntX(yyv11, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		yyv13 := &x.IP
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.AutoAdvertise = false
	} else {
		yyv15 := &x.AutoAdvertise
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FingerprintRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Config == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Config) {
					} else {
						z.EncFallback(x.Config)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Config"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Config == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Config) {
					} else {
						z.EncFallback(x.Config)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Node) {
					} else {
						z.EncFallback(x.Node)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Node"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Node) {
					} else {
						z.EncFallback(x.Node)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FingerprintRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FingerprintRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Config":
			if r.TryDecodeAsNil() {
				if x.Config != nil {
					x.Config = nil
				}
			} else {
				if x.Config == nil {
					x.Config = new(pkg3_config.Config)
				}
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Config) {
				} else {
					z.DecFallback(x.Config, false)
				}
			}
		case "Node":
			if r.TryDecodeAsNil() {
				if x.Node != nil {
					x.Node = nil
				}
			} else {
				if x.Node == nil {
					x.Node = new(pkg2_structs.Node)
				}
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Node) {
				} else {
					z.DecFallback(x.Node, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FingerprintRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.Config != nil {
			x.Config = nil
		}
	} else {
		if x.Config == nil {
			x.Config = new(pkg3_config.Config)
		}
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Config) {
		} else {
			z.DecFallback(x.Config, false)
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.Node != nil {
			x.Node = nil
		}
	} else {
		if x.Node == nil {
			x.Node = new(pkg2_structs.Node)
		}
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Node) {
		} else {
			z.DecFallback(x.Node, false)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *FingerprintResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Attributes"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Links == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringStringV(x.Links, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Links"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Links == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringStringV(x.Links, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Resources) {
					} else {
						z.EncFallback(x.Resources)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Resources"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Resources) {
					} else {
						z.EncFallback(x.Resources)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.Detected))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Detected"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.Detected))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *FingerprintResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *FingerprintResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Attributes":
			if r.TryDecodeAsNil() {
				x.Attributes = nil
			} else {
				yyv4 := &x.Attributes
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4, false, d)
				}
			}
		case "Links":
			if r.TryDecodeAsNil() {
				x.Links = nil
			} else {
				yyv6 := &x.Links
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringStringX(yyv6, false, d)
				}
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(pkg2_structs.Resources)
				}
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Resources) {
				} else {
					z.DecFallback(x.Resources, false)
				}
			}
		case "Detected":
			if r.TryDecodeAsNil() {
				x.Detected = false
			} else {
				yyv10 := &x.Detected
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *FingerprintResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Attributes = nil
	} else {
		yyv13 := &x.Attributes
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecMapStringStringX(yyv13, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Links = nil
	} else {
		yyv15 := &x.Links
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecMapStringStringX(yyv15, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(pkg2_structs.Resources)
		}
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Resources) {
		} else {
			z.DecFallback(x.Resources, false)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Detected = false
	} else {
		yyv19 := &x.Detected
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *HealthCheckRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *HealthCheckRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *HealthCheckRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *HealthCheckRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *HealthCheckResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				if x.Drivers == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtostructs_DriverInfo((map[string]*pkg2_structs.DriverInfo)(x.Drivers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Drivers"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				if x.Drivers == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtostructs_DriverInfo((map[string]*pkg2_structs.DriverInfo)(x.Drivers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *HealthCheckResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *HealthCheckResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Drivers":
			if r.TryDecodeAsNil() {
				x.Drivers = nil
			} else {
				yyv4 := &x.Drivers
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtostructs_DriverInfo((*map[string]*pkg2_structs.DriverInfo)(yyv4), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *HealthCheckResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Drivers = nil
	} else {
		yyv7 := &x.Drivers
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			h.decMapstringPtrtostructs_DriverInfo((*map[string]*pkg2_structs.DriverInfo)(yyv7), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *HealthCheckIntervalRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *HealthCheckIntervalRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *HealthCheckIntervalRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *HealthCheckIntervalRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x *HealthCheckIntervalResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Eligible))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Eligible"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Eligible))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem102)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Period) {
				} else {
					r.EncodeInt(int64(x.Period))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey102)
				r.EncodeString(codecSelferC_UTF8102, string("Period"))
				z.EncSendContainerState(codecSelfer_containerMapValue102)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Period) {
				} else {
					r.EncodeInt(int64(x.Period))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd102)
			}
		}
	}
}

func (x *HealthCheckIntervalResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap102 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd102)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray102 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd102)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr102)
		}
	}
}

func (x *HealthCheckIntervalResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey102)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue102)
		switch yys3 {
		case "Eligible":
			if r.TryDecodeAsNil() {
				x.Eligible = false
			} else {
				yyv4 := &x.Eligible
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "Period":
			if r.TryDecodeAsNil() {
				x.Period = 0
			} else {
				yyv6 := &x.Period
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x *HealthCheckIntervalResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Eligible = false
	} else {
		yyv9 := &x.Eligible
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd102)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem102)
	if r.TryDecodeAsNil() {
		x.Period = 0
	} else {
		yyv11 := &x.Period
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv11) {
		} else {
			*((*int64)(yyv11)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem102)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x codecSelfer102) encSlicePtrtoAllocFileInfo(v []*AllocFileInfo, e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem102)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd102)
}

func (x codecSelfer102) decSlicePtrtoAllocFileInfo(v *[]*AllocFileInfo, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*AllocFileInfo{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*AllocFileInfo, yyrl1)
				}
			} else {
				yyv1 = make([]*AllocFileInfo, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = AllocFileInfo{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(AllocFileInfo)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocFileInfo{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocFileInfo)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *AllocFileInfo
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocFileInfo{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocFileInfo)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*AllocFileInfo{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer102) encMapstringPtrtoResourceUsage(v map[string]*ResourceUsage, e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey102)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8102, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue102)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd102)
}

func (x codecSelfer102) decMapstringPtrtoResourceUsage(v *map[string]*ResourceUsage, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*ResourceUsage, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *ResourceUsage
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey102)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue102)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = ResourceUsage{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(ResourceUsage)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey102)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue102)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = ResourceUsage{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(ResourceUsage)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x codecSelfer102) encMapstringPtrtoTaskResourceUsage(v map[string]*TaskResourceUsage, e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey102)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8102, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue102)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd102)
}

func (x codecSelfer102) decMapstringPtrtoTaskResourceUsage(v *map[string]*TaskResourceUsage, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*TaskResourceUsage, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *TaskResourceUsage
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey102)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue102)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = TaskResourceUsage{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(TaskResourceUsage)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey102)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue102)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = TaskResourceUsage{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(TaskResourceUsage)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}

func (x codecSelfer102) encMapstringPtrtostructs_DriverInfo(v map[string]*pkg2_structs.DriverInfo, e *codec1978.Encoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey102)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8102, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue102)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv1) {
			} else {
				z.EncFallback(yyv1)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd102)
}

func (x codecSelfer102) decMapstringPtrtostructs_DriverInfo(v *map[string]*pkg2_structs.DriverInfo, d *codec1978.Decoder) {
	var h codecSelfer102
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*pkg2_structs.DriverInfo, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *pkg2_structs.DriverInfo
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey102)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue102)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = pkg2_structs.DriverInfo{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(pkg2_structs.DriverInfo)
				}
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yymv1) {
				} else {
					z.DecFallback(yymv1, false)
				}
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey102)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue102)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = pkg2_structs.DriverInfo{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(pkg2_structs.DriverInfo)
				}
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yymv1) {
				} else {
					z.DecFallback(yymv1, false)
				}
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd102)
}
